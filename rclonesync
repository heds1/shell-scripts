#!/bin/bash
# run rclone sync to backup user files.
# currently lives in $HOME/.local/bin
# usage: $ rclonesync
#
# opts:
#   -t
#       test: run rclone sync as a --dry-run, i.e.,
#       don't make changes but see what would happen
#   -d
#       download changes from remote, rather than
#       upload changes
#   -u
#       upload changes from local to remote,
#       rather than download


# define logfile
log_file=~/synclog.txt

# define target subdirectories to be synced
target_dirs=('testdir') # for dev only
#target_dirs=('employment' 'finance' 'pics' 'notes' 'personal')

# explicity define vars in this env
dry_run=false
download=false

# get options
while getopts ":tdu" opt; do
    case $opt in
        d) download=true                          ;;
        u) upload=true                            ;;
        t) dry_run=true                           ;;
        \?) echo "Invalid option: -$OPTARG" >&2   ;;
    esac
done

# don't allow -u and -d at the same time!
if [ "$download" = true ] && [ "$upload" = true ] ; then
    echo "You can only supply one of -u and -d."
    exit 1
fi

# define source and remote destinations
if [ "$download" = true ] ; then
    echo Downloading files...
    source_dir=remote:
    dest_dir=~/docs/
elif [ "$upload" = true ] ; then
    echo Uploading files...
    source_dir=~/docs/
    dest_dir=remote:
else
    echo "Please supply a -u or -d flag."
    exit 1
fi

for folder in "${target_dirs[@]}"
    do
        sync_status="Syncing $folder folder"
        if [ "$dry_run" = true ] ; then
            sync_status="$sync_status as a dry run"
            echo $sync_status
            rclone sync $source_dir$folder $dest_dir$folder -v --dry-run 2>&1 | tee -a ${log_file}
        else
            echo $sync_status
            rclone sync $source_dir$folder $dest_dir$folder -v 2>&1 | tee -a ${log_file}
        fi
    done
